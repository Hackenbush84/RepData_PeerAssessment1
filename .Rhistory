?dev.copy2pdf
?png
?lines
?boxplot
?lines
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lpoints
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality)
load(ggplot2)
library(ggplot2)
library("ggplot2")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
install.packages(c("grDevices", "RColorBrewer"))
install.packages(c("grDevices", "RColorBrewer"))
install.packages(c("BH", "jsonlite", "magrittr", "RCurl", "sqldf"))
data <- read.csv("activity.csv", header = TRUE)
dailySteps <- aggregate(data$steps, by = list(data$date), FUN="sum", na.rm=TRUE)
setwd("C:/Users/DeltaR3J/Desktop/Coursera/ReprRes/RepData_PeerAssessment1")
data <- read.csv("activity.csv", header = TRUE)
dailySteps <- aggregate(data$steps, by = list(data$date), FUN="sum", na.rm=TRUE)
meanSteps <- mean(dailySteps[,2])
medianSteps <- median(dailySteps[,2])
dailyStepPattern <- aggregate(data$steps, by = list(data$interval), FUN="mean",
na.rm=TRUE)
NAs <- data[is.na(data$steps),]
nrow(NAs)
impData <- data
impData <- data
for i in impData{
}
for (i in impData){
}
for (i in nrow(impData)){
}
for (i in nrow(impData)){
if (is.na(impData$steps[i])){
}
}
View(data)
View(dailyStepPattern)
for (i in nrow(impData)){
if (is.na(impData$steps[i])){
timeSlot <- impData$interval[i]
}
}
for (i in nrow(impData)){
if (is.na(impData$steps[i])){
timeSlot <- impData$interval[i]
slotMedian <- dailyStepPattern[dailyStepPattern$Group.1 == timeSlot,2]
}
}
impData <- data
for (i in nrow(impData)){
if (is.na(impData$steps[i])){
timeSlot <- impData$interval[i]
slotMedian <- dailyStepPattern[dailyStepPattern$Group.1 == timeSlot,2]
impData$steps[i] <- slotMedian
}
}
is.na(impData$steps[i])
is.na(impData$steps[1])
is.na(impData$steps[111])
is.na(impData$steps[1111])
View(impData)
impData$steps[1]
impData$steps[1] <- 2
impData$steps[1]
impData <- data
for (i in nrow(impData)){
i
if (is.na(impData$steps[i])){
timeSlot <- impData$interval[i]
slotMedian <- dailyStepPattern[dailyStepPattern$Group.1 == timeSlot,2]
impData$steps[i] <- slotMedian
}
}
for (i in (1:nrow(impData))){
i
if (is.na(impData$steps[i])){
timeSlot <- impData$interval[i]
slotMedian <- dailyStepPattern[dailyStepPattern$Group.1 == timeSlot,2]
impData$steps[i] <- slotMedian
}
}
View(dailyStepPattern)
impDailySteps <- aggregate(data$steps, by = list(impData$date), FUN="sum", na.rm=TRUE)
mean(impDailySteps[,2])
median(impDailySteps[,2])
impDailySteps <- aggregate(data$steps, by = list(impData$date), FUN="sum", na.rm=TRUE)
mean(impDailySteps[,2])
median(impDailySteps[,2])
hist(impDailySteps[,2], breaks = 15, col = "red", main = "Daily Step Frequency",
xlab = "Steps")
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
data <- read.csv("activity.csv", header = TRUE)
dailySteps <- aggregate(data$steps, by = list(data$date), FUN="sum", na.rm=TRUE)
```
## What is mean total number of steps taken per day?
```{r}
hist(dailySteps[,2], breaks = 15, col = "red", main = "Daily Step Frequency",
xlab = "Steps")
mean(dailySteps[,2])
median(dailySteps[,2])
```
## What is the average daily activity pattern?
```{r}
dailyStepPattern <- aggregate(data$steps, by = list(data$interval), FUN="mean",
na.rm=TRUE)
plot(dailyStepPattern$Group.1,dailyStepPattern$x, type = "l",
xlab = "Time Interval", ylab = "Average # of Steps", main = "Mean Steps for
Each Time Interval")
```
###Time Interval with Maximum Average Step Count:
```{r}
dailyStepPattern[dailyStepPattern$x == max(dailyStepPattern$x),1]
```
## Imputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the
total number of rows with NAs)
```{r}
NAs <- data[is.na(data$steps),]
nrow(NAs)
```
Devise a strategy for filling in all of the missing values in the dataset. The
strategy does not need to be sophisticated. For example, you could use the
mean/median for that day, or the mean for that 5-minute interval, etc.
Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
#We will replace missing values with the median for the corresponding interval
#among non-missing observations
impData <- data
for (i in (1:nrow(impData))){
i
if (is.na(impData$steps[i])){
timeSlot <- impData$interval[i]
slotMedian <- dailyStepPattern[dailyStepPattern$Group.1 == timeSlot,2]
impData$steps[i] <- slotMedian
}
}
```
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
impDailySteps <- aggregate(data$steps, by = list(impData$date), FUN="sum", na.rm=TRUE)
mean(impDailySteps[,2])
median(impDailySteps[,2])
hist(impDailySteps[,2], breaks = 15, col = "red", main = "Daily Step Frequency",
xlab = "Steps")
```
## Are there differences in activity patterns between weekdays and weekends?
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
data <- read.csv("activity.csv", header = TRUE)
dailySteps <- aggregate(data$steps, by = list(data$date), FUN="sum", na.rm=TRUE)
```
## What is mean total number of steps taken per day?
```{r}
hist(dailySteps[,2], breaks = 15, col = "red", main = "Daily Step Frequency",
xlab = "Steps")
meanSteps <- mean(dailySteps[,2])
medianSteps <- median(dailySteps[,2])
```
## What is the average daily activity pattern?
```{r}
dailyStepPattern <- aggregate(data$steps, by = list(data$interval), FUN="mean",
na.rm=TRUE)
plot(dailyStepPattern$Group.1,dailyStepPattern$x, type = "l",
xlab = "Time Interval", ylab = "Average # of Steps", main = "Mean Steps for
Each Time Interval")
```
###Time Interval with Maximum Average Step Count:
```{r}
dailyStepPattern[dailyStepPattern$x == max(dailyStepPattern$x),1]
```
## Imputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the
total number of rows with NAs)
```{r}
NAs <- data[is.na(data$steps),]
nrow(NAs)
```
Devise a strategy for filling in all of the missing values in the dataset. The
strategy does not need to be sophisticated. For example, you could use the
mean/median for that day, or the mean for that 5-minute interval, etc.
Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
#We will replace missing values with the median for the corresponding interval
#among non-missing observations
impData <- data
for (i in (1:nrow(impData))){
i
if (is.na(impData$steps[i])){
timeSlot <- impData$interval[i]
slotMedian <- dailyStepPattern[dailyStepPattern$Group.1 == timeSlot,2]
impData$steps[i] <- slotMedian
}
}
```
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
impDailySteps <- aggregate(data$steps, by = list(impData$date), FUN="sum", na.rm=TRUE)
mean(impDailySteps[,2])
median(impDailySteps[,2])
hist(impDailySteps[,2], breaks = 15, col = "red", main = "Daily Step Frequency",
xlab = "Steps")
```
## Are there differences in activity patterns between weekdays and weekends?
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
data <- read.csv("activity.csv", header = TRUE)
dailySteps <- aggregate(data$steps, by = list(data$date), FUN="sum", na.rm=TRUE)
```
## What is mean total number of steps taken per day?
```{r}
hist(dailySteps[,2], breaks = 15, col = "red", main = "Daily Step Frequency",
xlab = "Steps")
meanSteps <- mean(dailySteps[,2])
medianSteps <- median(dailySteps[,2])
```
## What is the average daily activity pattern?
```{r}
dailyStepPattern <- aggregate(data$steps, by = list(data$interval), FUN="mean",
na.rm=TRUE)
plot(dailyStepPattern$Group.1,dailyStepPattern$x, type = "l",
xlab = "Time Interval", ylab = "Average # of Steps", main = "Mean Steps for
Each Time Interval")
```
###Time Interval with Maximum Average Step Count:
```{r}
dailyStepPattern[dailyStepPattern$x == max(dailyStepPattern$x),1]
```
## Imputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the
total number of rows with NAs)
```{r}
NAs <- data[is.na(data$steps),]
nrow(NAs)
```
Devise a strategy for filling in all of the missing values in the dataset. The
strategy does not need to be sophisticated. For example, you could use the
mean/median for that day, or the mean for that 5-minute interval, etc.
Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
#We will replace missing values with the median for the corresponding interval
#among non-missing observations
impData <- data
for (i in (1:nrow(impData))){
i
if (is.na(impData$steps[i])){
timeSlot <- impData$interval[i]
slotMedian <- dailyStepPattern[dailyStepPattern$Group.1 == timeSlot,2]
impData$steps[i] <- slotMedian
}
}
```
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
impDailySteps <- aggregate(data$steps, by = list(impData$date), FUN="sum", na.rm=TRUE)
mean(impDailySteps[,2])
median(impDailySteps[,2])
hist(impDailySteps[,2], breaks = 15, col = "red", main = "Daily Step Frequency",
xlab = "Steps")
```
## Are there differences in activity patterns between weekdays and weekends?
View(dailySteps)
View(impData)
View(data)
View(impDailySteps)
median(impDailySteps[,2])
mean(impDailySteps[,2])
mean(impDailySteps[,2])
source('~/.active-rstudio-document', echo=TRUE)
mean(impDailySteps[,2])
median(impDailySteps[,2])
View(impDailySteps)
summarise(impDailySteps.x)
sumarise(impDailySteps.x)
str(impDailySteps.x)
str(impDailySteps$x)
quantile(impDailySteps$x)
((sum(impDailySteps$x))/nrow(impDailySteps$x))
sum(impDailySteps$x)
nrow(impDailySteps$x)
((sum(impDailySteps$x))/nrow(impDailySteps))
View(data)
as.factor(impData$dayType)
?weekdays
as.factor(impData$dayType)
for (i in 1:nrow(impData)){
}
as.factor(impData$dayType)
for (i in 1:nrow(impData)){
if (weekdays(impData$date[i]) %in% c("Saturday","Sunday")){
weekdays(impData$date[i]) <- "weekend"
} else {
weekdays(impData$date[i]) <- "weekday"
}
}
as.factor(impData$dayType)
for (i in 1:nrow(impData)){
if (weekdays(impData$date[i]) %in% c("Saturday","Sunday")){
weekdays(impData$dayType[i]) <- "weekend"
} else {
weekdays(impData$$dayType[i]) <- "weekday"
}
}
for (i in 1:nrow(impData)){
if (weekdays(impData$date[i]) %in% c("Saturday","Sunday")){
weekdays(impData$dayType[i]) <- "weekend"
} else {
weekdays(impData$dayType[i]) <- "weekday"
}
}
as.factor(impData$dayType)
for (i in 1:nrow(impData)){
if (weekdays(impData$date[i]) %in% c("Saturday","Sunday")){
impData$dayType[i] <- "weekend"
} else {
impData$dayType[i] <- "weekday"
}
}
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
type(impData$date)
class(impData$date)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
View(impData)
weekdays("2012-10-04")
weekdays(2012-10-04)
weekdays(as.Date("2012-10-04")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
chr(impData)
str(impData)
unique(impData$daytype)
unique(impData$dayType)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
par(mfrow=c(2,1))
impDailyStepPattern <- aggregate(impData$steps, by = list(impData$interval), FUN="mean",
na.rm=TRUE)
View(NAs)
library(lattice)
impDailyStepPattern <- aggregate(impData$steps, by = list(impData$interval,impData$dayType), FUN="mean",
na.rm=TRUE)
View(impDailyStepPattern)
View(impDailyStepPattern)
library(lattice)
impDailyStepPattern <- aggregate(impData$steps, by = list(impData$interval,impData$dayType), FUN="mean",
na.rm=TRUE)
xyplot(Group.1 ~ x | Group.2 , impDailyStepPattern)
xyplot(x ~ Group.1 | Group.2 , impDailyStepPattern)
xyplot(x ~ Group.1 | Group.2 , impDailyStepPattern, type = "l")
library(lattice)
impDailyStepPattern <- aggregate(impData$steps, by = list(impData$interval,
impData$dayType), FUN="mean")
xyplot(x ~ Group.1 | Group.2 , impDailyStepPattern, type = "l",
xlab = "Time Interval", ylab = "Average # of Steps",
main = "Mean Steps for Each Time Interval")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
